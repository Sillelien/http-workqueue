mkdir -p /tasks/$REQ_ID

serve_pong() {
    add_response_header "Content-Type" "text/plain"
    send_response_ok_exit <<< "pong $2"
}
on_uri_match '^/ping/(.*)$' serve_pong

serve_enqueue() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$REQ_ID"
    task=$(ts -n ex.sh "$2" "$3")
    echo $task > /tasks/$REQ_ID/ts.id.txt
    send_response_ok_exit <<< "$REQ_ID"
}
on_uri_match '^/enqueue/([a-zA-Z_.0-9-]*)/(.*)$' serve_enqueue


serve_queue() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$2"
    task_id=$(</tasks/$2/ts.id.txt)
    export argument=$1
    result=$(ts -n "-${argument}" ${task_id})
    send_response_ok_exit <<< "$result"
}

serve_queue_status() { serve_queue i $2; }
on_uri_match '^/queue/([a-fA-F0-9-]*)/status' serve_queue_status

serve_queue_delete() { serve_queue r $2; }
on_uri_match '^/queue/([a-fA-F0-9-]*)/delete' serve_queue_delete

serve_queue_wait() { serve_queue w $2; }
on_uri_match '^/queue/([a-fA-F0-9-]*)/wait' serve_queue_wait

serve_queue_stdout() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$2"
    send_response_ok_exit < /tasks/$2/stdout
}
on_uri_match '^/queue/([a-fA-F0-9-]*)/stdout' serve_queue_stdout

serve_queue_assert() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$2"
    task_id=$(</tasks/$2/ts.id.txt)
    ts -w $task_id
    if grep "$4" /tasks/$2/stdout &> /dev/null
    then
        send_response_ok_exit < /dev/null
    else
        fail_with 404
    fi
}
on_uri_match '^/queue/([a-fA-F0-9-]*)/assert/(.*)' serve_queue_assert



serve_queue_stderr() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$2"
        ts -w $task

    send_response_ok_exit < /tasks/$2/stderr
}
on_uri_match '^/queue/([a-fA-F0-9-]*)/stderr' serve_queue_stderr

serve_execute() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$REQ_ID"

    task=$(ts -n ex.sh "$2" "$3")
    echo "TS Task: $task"  1>&2
    echo $task > /tasks/$REQ_ID/ts.id.txt
    ts -w $task
    cat /tasks/$REQ_ID/stdout 1>&2
    send_response_ok_exit < /tasks/$REQ_ID/stdout
    exit 0
}
on_uri_match '^/execute/([a-zA-Z_.0-9-]*)/(.*)$' serve_execute


schedule_execute() {
    add_response_header "Content-Type" "text/plain"
    add_response_header "X-Task-Id" "$REQ_ID"

    task=$(echo ex.sh \"$3\" \"$4\" | at $2 2>&1 | cut -d' ' -f2)
    echo $task > /tasks/$REQ_ID/at.id.txt
    send_response_ok_exit <<< "$REQ_ID"
    exit 0
}
on_uri_match '^/schedule/([ a-zA-Z_.0-9-]*)/([a-zA-Z_.0-9-]*)/(.*)$' schedule_execute
